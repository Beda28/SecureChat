services:
  server:
    container_name: back
    build: ./backend
    networks:
      - app-network
      - db-network
    ports:
      - "8000:8000"
    depends_on:
      DB-SQL:
        condition: service_healthy
      DB-Mongo:
        condition: service_healthy
    volumes:
      - ./back:/backend

  frontend:
    container_name: frontend
    build: ./frontend
    networks:
      - app-network
    ports:
      - "5173:5173"
    depends_on:
      DB-SQL:
        condition: service_healthy
    volumes:
      - ./frontend:/frontend/app
    environment:
      - VITE_HOST=0.0.0.0

  DB-SQL:
    container_name: DB-SQL
    image: mysql:8.0
    networks:
      - db-network
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: adminroot
      MYSQL_DATABASE: SecureChat
      MYSQL_USER: beda
      MYSQL_PASSWORD: adm!nro0t
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  DB-Mongo:
    container_name: DB-Mongo
    image: mongo:6.0
    networks:
      - db-network
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
    healthcheck:
      test: ["CMD", "bash", "-c", "cat < /dev/null > /dev/tcp/localhost/27017"]
      interval: 300s
      timeout: 3s
      retries: 5
      start_period: 10s
    command: ["mongod", "--bind_ip_all", "--auth"]
    environment: 
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: adm!nro0t
    
  DB-Redis:
    container_name: DB-Redis
    image: redis:7-alpine
    networks:
      - db-network
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  nginx:
    container_name: nginx-A
    image: nginx:latest
    networks:
      - db-network
      - app-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - server
    ports:
      - "80:80"

volumes:
  db_data:
  mongo_data:
  redis_data:


networks:
  app-network:
    driver: bridge
  db-network:
    driver: bridge